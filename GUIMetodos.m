function GUIMetodos

close all
clear all
clc

Num_Tabs=4;
Tab_Lab={'Raices';'Sistemas de Ecuaciones';'Interpolación';'Derivación e Integración'};


MaxWindowX = 750;
MaxWindowY = 700;

XBorder = (1920-MaxWindowX)/2;
YBorder = (1080-MaxWindowY)/2;

ButtonHeight = 40;

PanelW = MaxWindowX+4;
PanelH = MaxWindowY-ButtonHeight;

ButtonWidth = round((PanelW-Num_Tabs)/Num_Tabs);

BackColor = [0.9 0.9 0.9];           % Light Grey - Background color

%% Create Main Tab
hTabFig = figure(...
    'Units', 'pixels',...
    'Toolbar', 'none',...
    'Position',[ XBorder, YBorder, MaxWindowX, MaxWindowY ],...
    'NumberTitle', 'off',...
    'Name', 'Métodos Numéricos',...
    'MenuBar', 'none',...
    'Resize', 'off',...
    'DockControls', 'off',...
    'Color', [1 1 1]);
movegui

%% Create a Cel with the information
TabHandles = cell(Num_Tabs,3);
TabHandles(:,3) = Tab_Lab(:,1);
%   Add additional rows for other data
TabHandles{Num_Tabs+1,1} = hTabFig;         % Main figure handle
TabHandles{Num_Tabs+1,2} = PanelW;      % Width of tab panel
TabHandles{Num_Tabs+1,3} = PanelH;     % Height of tab panel
TabHandles{Num_Tabs+2,1} = 0;               % Handle to default tab 2 content(set later)
TabHandles{Num_Tabs+2,2} = [1 1 1];           % Selected tab Color
TabHandles{Num_Tabs+2,3} = BackColor;

%% Creat Each Tab

for TabNumber = 1:Num_Tabs
    % create a Panel
    TabHandles{TabNumber,1} = uipanel('Units', 'pixels', ...
        'Visible', 'off', ...
        'Backgroundcolor', BackColor, ...
        'BorderWidth',1, ...
        'Position', [0 0 PanelW PanelH]);
    
    % create a selection pushbutton
    TabHandles{TabNumber,2} = uicontrol('Style', 'pushbutton',...
        'Units', 'pixels', ...
        'BackgroundColor', BackColor, ...
        'Position', [(TabNumber-1)*ButtonWidth PanelH ButtonWidth ButtonHeight], ...
        'String', TabHandles{TabNumber,3},...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 10);
    
end
for CountTabs = 1:Num_Tabs
    set(TabHandles{CountTabs,2}, 'callback', ...
        {@TabSellectCallback, CountTabs});
end

%% Raices
Intro = {'Aqui puedes encontrar raices o un intervalo donde puedes encontrar una raiz de una función'};

%   Display it
uicontrol('Style', 'text',...
    'Position', [round(PanelW/8) 7*ButtonHeight+50 round(3*PanelW/4) 324 ],...
    'Parent', TabHandles{1,1}, ...
    'string', Intro,...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 12*ButtonHeight+50 round(PanelW/2)-135 50 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Método: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...\
    'FontSize', 14);

rootsElements.popup = uicontrol('Style', 'popupmenu',...
    'Position', [round(PanelW/4)+170 12*ButtonHeight+50 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'HorizontalAlignment', 'left',...
    'Callback',@PopupCallback,...
    'FontName', 'arial',...
    'String',{'Busqueda Incremental','Bisección','Regla Falsa',...
    'Punto Fijo','Newton','Secantes','Raices Multiples'},...
    'FontSize', 14);

rootsElements.fxText = uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 10*ButtonHeight+50 round(PanelW/2)-135 50 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Function f(x):',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.functionfx =uicontrol('Style','edit',...
    'Position',[round(PanelW/4)+170 11*ButtonHeight+32 round(PanelW/2)-135 60 ],...
    'Parent',TabHandles{1,1},...
    'BackgroundColor',[1 1 1],...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.gxText = uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 9*ButtonHeight+30 round(PanelW/2)-135 50 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Function g(x):',...
    'visible','off',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.functiongx = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+170 10*ButtonHeight+5 round(PanelW/2)-135 60 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'visible','off',...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);



rootsElements.xText = uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 9*ButtonHeight+55 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'x0:',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.x0value = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+170 10*ButtonHeight+25 round(PanelW/2)-270 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.x1value = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+295 10*ButtonHeight+25 round(PanelW/2)-270 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'visible','off',...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.ErrorText=uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 8*ButtonHeight+50 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Tamaño de Paso:',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.Error = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+170 8*ButtonHeight+60 round(PanelW/2)-270 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.IterText =uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 7*ButtonHeight+45 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Iteraciones Max: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.Iter = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+170 7*ButtonHeight+55 round(PanelW/2)-270 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.SolButton=uicontrol('Parent', TabHandles{1,1}, ...
    'Units', 'pixels', ...
    'Position', [300 6*ButtonHeight+40 150 ButtonHeight], ...
    'String', 'Encontrar Raíz', ...
    'Callback', @RootCallback , ...
    'Style', 'pushbutton',...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 12);

rootsElements.SolText=uicontrol('Style', 'text',...
    'Position', [100 5*ButtonHeight+35 350 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Raiz encontrada en el intervalo: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.Sol=uicontrol('Style', 'edit',...
    'Position', [100 4*ButtonHeight+45 350 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.condText=uicontrol('Style', 'text',...
    'Position', [100 3*ButtonHeight+35 350 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Con la condición de parada: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.cond=uicontrol('Style', 'edit',...
    'Position', [100 2*ButtonHeight+45 350 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);
rootsElements.ErText=uicontrol('Style', 'text',...
    'Position', [500 5*ButtonHeight+35 150 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Error: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);
rootsElements.Er=uicontrol('Style', 'edit',...
    'Position', [500 4*ButtonHeight+45 150 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);
rootsElements.NText=uicontrol('Style', 'text',...
    'Position', [500 3*ButtonHeight+35 150 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'N° Iteraciones: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.N=uicontrol('Style', 'edit',...
    'Position', [500 2*ButtonHeight+45 150 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);
data{1} = TabHandles;
data{2} = rootsElements;

guidata(hTabFig,data);
%%   Make Tab 1 active
TabSellectCallback(0,0,1);


try
    Popup1Callback(linearSElements.popup);
catch
end

end


function TabSellectCallback(~,~,SelectedTab)
%   All tab selection pushbuttons are greyed out and uipanels are set to
%   visible off, then the selected panel is made visible and it's selection
%   pushbutton is highlighted.

%   Set up some varables
data = guidata(gcf);
TabHandles = data{1};
NumberOfTabs = size(TabHandles,1)-2;
White = TabHandles{NumberOfTabs+2,2};            % White
BGColor = TabHandles{NumberOfTabs+2,3};          % Light Grey

%   Turn all tabs off
for TabCount = 1:NumberOfTabs
    set(TabHandles{TabCount,1}, 'Visible', 'off');
    set(TabHandles{TabCount,2}, 'BackgroundColor', BGColor);
end

%   Enable the selected tab
set(TabHandles{SelectedTab,1}, 'Visible', 'on');
set(TabHandles{SelectedTab,2}, 'BackgroundColor', White);
end

function PopupCallback(hObject, eventdata, handles)

data = guidata(gcf);
elem = data{2};

ButtonHeight = 40;

if get(hObject,'value') == 4 
    
    set(elem.functiongx,'visible','on');
    set(elem.gxText, 'visible','on');
    
    pos = get(elem.x0value,'position');
    pos(2)= 10*ButtonHeight-45;
    set(elem.x0value,'position',pos);
    
    pos = get(elem.xText,'position');
    pos(2)= 9*ButtonHeight-15;
    set(elem.xText,'position',pos);
    
    pos = get(elem.ErrorText,'position');
    pos(2)= 8*ButtonHeight-20;
    set(elem.ErrorText,'position',pos); 
    
    pos = get(elem.Error,'position');
    pos(2)= 8*ButtonHeight-10;
    set(elem.Error,'position',pos);
    
    pos = get(elem.IterText,'position');
    pos(2)= 7*ButtonHeight-25;
    set(elem.IterText,'position',pos);
    
    pos = get(elem.Iter,'position');
    pos(2)= 7*ButtonHeight-15;
    set(elem.Iter,'position',pos);
    
    pos = get(elem.SolButton,'position');
    pos(2)= 6*ButtonHeight-30;
    set(elem.SolButton,'position',pos);
    
    pos = get(elem.SolText,'position');
    pos(2)= 5*ButtonHeight-35;
    set(elem.SolText,'position',pos);
    
    pos = get(elem.Sol,'position');
    pos(2)= 4*ButtonHeight-25;
    set(elem.Sol,'position',pos);
    
    pos = get(elem.condText,'position');
    pos(2)= 3*ButtonHeight-35;
    set(elem.condText,'position',pos);
    
    pos = get(elem.cond,'position');
    pos(2)= 2*ButtonHeight-25;
    set(elem.cond,'position',pos);
    
    pos = get(elem.ErText,'position');
    pos(2)= 5*ButtonHeight-35;
    set(elem.ErText,'position',pos);
    
    pos = get(elem.Er,'position');
    pos(2)= 4*ButtonHeight-25;
    set(elem.Er,'position',pos);
    
    pos = get(elem.NText,'position');
    pos(2)= 3*ButtonHeight-35;
    set(elem.NText,'position',pos);
    
    pos = get(elem.N,'position');
    pos(2)= 2*ButtonHeight-25;
    set(elem.N,'position',pos);
else
    set(elem.functiongx,'visible','off');
    set(elem.gxText, 'visible','off');
    
    pos = get(elem.x0value,'position');
    pos(2)= 10*ButtonHeight+25;
    set(elem.x0value,'position',pos);
    
    pos = get(elem.xText,'position');
    pos(2)= 9*ButtonHeight+55;
    set(elem.xText,'position',pos);
    
    pos = get(elem.ErrorText,'position');
    pos(2)= 8*ButtonHeight+50;
    set(elem.ErrorText,'position',pos); 
    
    pos = get(elem.Error,'position');
    pos(2)= 8*ButtonHeight+60;
    set(elem.Error,'position',pos);
    
    pos = get(elem.IterText,'position');
    pos(2)= 7*ButtonHeight+45;
    set(elem.IterText,'position',pos);
    
    pos = get(elem.Iter,'position');
    pos(2)= 7*ButtonHeight+55;
    set(elem.Iter,'position',pos);
    
    pos = get(elem.SolButton,'position');
    pos(2)= 6*ButtonHeight+40;
    set(elem.SolButton,'position',pos);
    
    pos = get(elem.SolText,'position');
    pos(2)= 5*ButtonHeight+35;
    set(elem.SolText,'position',pos);
    
    pos = get(elem.Sol,'position');
    pos(2)= 4*ButtonHeight+45;
    set(elem.Sol,'position',pos);
    
    pos = get(elem.ErText,'position');
    pos(2)= 5*ButtonHeight+35;
    set(elem.ErText,'position',pos);
    
    pos = get(elem.Er,'position');
    pos(2)= 4*ButtonHeight+45;
    set(elem.Er,'position',pos);
    
    pos = get(elem.condText,'position');
    pos(2)= 3*ButtonHeight+35;
    set(elem.condText,'position',pos);
    
    pos = get(elem.cond,'position');
    pos(2)= 2*ButtonHeight+45;
    set(elem.cond,'position',pos);
    
    pos = get(elem.NText,'position');
    pos(2)= 3*ButtonHeight+35;
    set(elem.NText,'position',pos);
    
    pos = get(elem.N,'position');
    pos(2)= 2*ButtonHeight+45;
    set(elem.N,'position',pos);
end
if get(hObject,'value') == 2 || get(hObject,'value') == 3 || get(hObject,'value') == 6
    
    set(elem.x1value,'visible','on');
    set(elem.xText,'string','x0 x1:')
else
    set(elem.x1value,'visible','off');
    set(elem.xText,'string','x0:')

end
if get(hObject,'value') == 1
    set(elem.ErrorText,'String','Tamaño de Paso: ')
    
else
    set(elem.ErrorText,'String','Error Esperado: ')

end
end
function RootCallback(~, ~)
format long
data = guidata(gcf);
elem = data{2};

x0=str2double(get(elem.x0value,'String'));
Nmax=str2double(get(elem.Iter,'String'));
Error=str2double(get(elem.Error,'String'));
switch get(elem.popup,'value')
    case 1
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        [X, cond, c]=bIncrementales(fun,x0,Error,Nmax);
        if (cond=="Iteraciones Máximas")
            set(elem.SolText,'String','Raiz no encontrada, intervalo final:')
            set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
            set(elem.Er, 'String', 'No Aplica');
        else
            if length(X)==1
                set(elem.SolText,'String','Raiz encontrada en el punto:')
                set(elem.Sol,'String',sprintf('%.16f',X));
                set(elem.Er, 'String','0');
            else
                set(elem.SolText,'String','Raiz encontrada en el intervalo:')
                set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
                set(elem.Er, 'String',num2str(Error));
            end
        end
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
    case 2
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        x1=str2double(get(elem.x1value,'String'));
        [X, cond, c, error] = biseccion(fun, x0, x1, Error, Nmax);
        if (cond=="Iteraciones Máximas")
            set(elem.SolText,'String','Raiz no encontrada, intervalo final:');
            set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
            set(elem.Er, 'String', error);
        elseif (cond=="No hay raiz en el intervalo")
            set(elem.SolText,'String','Raiz no encontrada')
            set(elem.Sol,'String','No Aplica');
            set(elem.Er, 'String', error);
        else
            if length(X)==1
                set(elem.SolText,'String','Raiz encontrada en el punto:')
                set(elem.Sol,'String',sprintf('%.16f',X));
                set(elem.Er, 'String','0');
            else
                set(elem.SolText,'String','Raiz encontrada en el intervalo:');
                set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
                set(elem.Er, 'String',num2str(error));
            end
        end
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
    case 3
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        x1=str2double(get(elem.x1value,'String'));
        [X, cond, c, error] = reglaFalsa(fun, x0, x1, Error, Nmax);
        if (cond=="Iteraciones Máximas")
            set(elem.SolText,'String','Raiz no encontrada, intervalo final:')
            set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
            set(elem.Er, 'String', error);
        elseif (cond=="No hay raiz en el intervalo")
            set(elem.SolText,'String','Raiz no encontrada')
            set(elem.Sol,'String',X);
            set(elem.Er, 'String', error);
        elseif(cond=="Raiz encontrada")
            set(elem.SolText,'String','Raiz encontrada en el punto:')
            set(elem.Sol,'String',sprintf('%.16f',X));
            set(elem.Er, 'String','0');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
            set(elem.Er, 'String',num2str(error));
            set(elem.Sol,'String',sprintf('%.16f',X));
        end
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
    case 4
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        g=str2func(['@(x)',(get(elem.functiongx,'String'))]);
        [X, cond, c, error] = puntoFijo(fun, g, x0, Error, Nmax);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
        set(elem.Sol,'String',sprintf('%.16f',X));
        set(elem.Er, 'String', error);
        if (cond=="Iteraciones Máximas")
             set(elem.SolText,'String','Raiz no encontrada, punto final:');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
        end
    case 5
        fun=get(elem.functionfx,'String');
        [X, cond, c, error]=newton(fun,x0,Error,Nmax);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
        set(elem.Sol,'String',sprintf('%.16f',X));
        set(elem.Er, 'String', num2str(error));
        if (cond=="Iteraciones Máximas")
             set(elem.SolText,'String','Raiz no encontrada, punto final:');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
        end
    case 6
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        x1=str2double(get(elem.x1value,'String'));
        [X, cond, c, error]=secante(fun,x0,x1,Error,Nmax);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
        set(elem.Sol,'String',sprintf('%.16f',X));
        set(elem.Er, 'String', num2str(error));
        if (cond=="Iteraciones Máximas")
             set(elem.SolText,'String','Raiz no encontrada, punto final:');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
        end
    case 7
        fun=get(elem.functionfx,'String');
        [X, cond, c, error]=raices(fun,x0,Error,Nmax);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
        set(elem.Sol,'String',sprintf('%.16f',X));
        set(elem.Er, 'String', num2str(error));
        if (cond=="Iteraciones Máximas")
             set(elem.SolText,'String','Raiz no encontrada, punto final:');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
        end
end

end

