function GUIMetodos

close all
clear all
clc

Num_Tabs=3;
Tab_Lab={'Raices';'Sistemas de Ecuaciones';'Interpolación'};


MaxWindowX = 1200;
MaxWindowY = 700;

XBorder = (1920-MaxWindowX)/2;
YBorder = (1080-MaxWindowY)/2;

ButtonHeight = 40;

PanelW = MaxWindowX+4;
PanelH = MaxWindowY-ButtonHeight;

ButtonWidth = round((PanelW-Num_Tabs)/Num_Tabs);

White=[1 1 1];
BackColor = [0.9 0.9 0.9];           % Light Grey - Background color

%% Create Main Tab
hTabFig = figure(...
    'Units', 'pixels',...
    'Toolbar', 'none',...
    'Position',[ XBorder, YBorder, MaxWindowX, MaxWindowY ],...
    'NumberTitle', 'off',...
    'Name', 'Métodos Numéricos',...
    'MenuBar', 'none',...
    'Resize', 'off',...
    'DockControls', 'off',...
    'Color', [1 1 1]);
movegui

%% Create a Cel with the information
TabHandles = cell(Num_Tabs,3);
TabHandles(:,3) = Tab_Lab(:,1);
%   Add additional rows for other data
TabHandles{Num_Tabs+1,1} = hTabFig;         % Main figure handle
TabHandles{Num_Tabs+1,2} = PanelW;      % Width of tab panel
TabHandles{Num_Tabs+1,3} = PanelH;     % Height of tab panel
TabHandles{Num_Tabs+2,1} = 0;               % Handle to default tab 2 content(set later)
TabHandles{Num_Tabs+2,2} = [1 1 1];           % Selected tab Color
TabHandles{Num_Tabs+2,3} = BackColor;

%% Creat Each Tab

for TabNumber = 1:Num_Tabs
    % create a Panel
    TabHandles{TabNumber,1} = uipanel('Units', 'pixels', ...
        'Visible', 'off', ...
        'Backgroundcolor', BackColor, ...
        'BorderWidth',1, ...
        'Position', [0 0 PanelW PanelH]);
    
    % create a selection pushbutton
    TabHandles{TabNumber,2} = uicontrol('Style', 'pushbutton',...
        'Units', 'pixels', ...
        'BackgroundColor', BackColor, ...
        'Position', [(TabNumber-1)*ButtonWidth PanelH ButtonWidth ButtonHeight], ...
        'String', TabHandles{TabNumber,3},...
        'HorizontalAlignment', 'center',...
        'FontName', 'arial',...
        'FontWeight', 'bold',...
        'FontSize', 10);
    
end
for CountTabs = 1:Num_Tabs
    set(TabHandles{CountTabs,2}, 'callback', ...
        {@TabSellectCallback, CountTabs});
end

%% Raices
Intro = {'Aqui puedes encontrar raices o un intervalo donde puedes encontrar una raiz de una función'};

%   Display it
uicontrol('Style', 'text',...
    'Position', [round(PanelW/8) 7*ButtonHeight+50 round(3*PanelW/4) 324 ],...
    'Parent', TabHandles{1,1}, ...
    'string', Intro,...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 12*ButtonHeight+50 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Método: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...\
    'FontSize', 14);

rootsElements.popup = uicontrol('Style', 'popupmenu',...
    'Position', [round(PanelW/4)+170 12*ButtonHeight+50 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'HorizontalAlignment', 'left',...
    'Callback',@PopupCallback,...
    'FontName', 'arial',...
    'String',{'Busqueda Incremental','Bisección','Regla Falsa',...
    'Punto Fijo','Newton','Secantes','Raices Multiples'},...
    'FontSize', 14);

rootsElements.fxText = uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 10*ButtonHeight+50 round(PanelW/2)-135 50 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Función f(x):',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.functionfx =uicontrol('Style','edit',...
    'Position',[round(PanelW/4)+170 11*ButtonHeight+32 round(PanelW/2)-135 60 ],...
    'Parent',TabHandles{1,1},...
    'BackgroundColor',[1 1 1],...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.gxText = uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 9*ButtonHeight+30 round(PanelW/2)-135 50 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Function g(x):',...
    'visible','off',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.functiongx = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+170 10*ButtonHeight+5 round(PanelW/2)-135 60 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'visible','off',...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);



rootsElements.xText = uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 9*ButtonHeight+55 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'x0:',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.x0value = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+170 10*ButtonHeight+25 round(PanelW/2)-368 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.x1value = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+404 10*ButtonHeight+25 round(PanelW/2)-368 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'visible','off',...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.ErrorText=uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 8*ButtonHeight+50 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Tamaño de Paso:',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.Error = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+170 8*ButtonHeight+60 round(PanelW/2)-368 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.IterText =uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 7*ButtonHeight+45 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Iteraciones Max: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.Iter = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+170 7*ButtonHeight+55 round(PanelW/2)-368 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', [1 1 1],...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.SolButton=uicontrol('Parent', TabHandles{1,1}, ...
    'Units', 'pixels', ...
    'Position', [525 6*ButtonHeight+40 150 ButtonHeight], ...
    'String', 'Encontrar Raíz', ...
    'Callback', @RootCallback , ...
    'Style', 'pushbutton',...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 12);

rootsElements.SolText=uicontrol('Style', 'text',...
    'Position', [325 5*ButtonHeight+35 350 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Raiz encontrada en el intervalo: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.Sol=uicontrol('Style', 'edit',...
    'Position', [325 4*ButtonHeight+45 350 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.condText=uicontrol('Style', 'text',...
    'Position', [325 3*ButtonHeight+35 350 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Con la condición de parada: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.cond=uicontrol('Style', 'edit',...
    'Position', [325 2*ButtonHeight+45 350 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);
rootsElements.ErText=uicontrol('Style', 'text',...
    'Position', [725 5*ButtonHeight+35 150 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'Error: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);
rootsElements.Er=uicontrol('Style', 'edit',...
    'Position', [725 4*ButtonHeight+45 150 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);
rootsElements.NText=uicontrol('Style', 'text',...
    'Position', [725 3*ButtonHeight+35 150 40 ],...
    'Parent', TabHandles{1,1}, ...
    'string', 'N° Iteraciones: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

rootsElements.N=uicontrol('Style', 'edit',...
    'Position', [725 2*ButtonHeight+45 150 40 ],...
    'Parent', TabHandles{1,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

%% Linear Sistems
%   Build default text for the Image tab
Intro = {'Aquí puedes resolver sistemas de ecuaciones lineales'};

%   Display it - Put the handle in TabHandles so that it can be deleted later
TabHandles{Num_Tabs+2,1} =uicontrol('Style', 'text',...
    'Position', [round(PanelW/8) 7*ButtonHeight+50 round(3*PanelW/4) 324 ],...
    'Parent', TabHandles{2,1}, ...
    'string', Intro,...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)-200 12*ButtonHeight+50 round(PanelW/2)-135 40],...
    'Parent', TabHandles{2,1}, ...
    'string', 'Método: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.popup = uicontrol('Style', 'popupmenu',...
    'Position', [round(PanelW/4)-50 12*ButtonHeight+50 round(PanelW/2)-200 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'Callback',@Popup2Callback,...
    'FontName', 'arial',...
    'String',{'Eliminación Gausiana','Factorización LU',...
    'Gauss Seidel','Jacobi Iterative'},...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)-200 12*ButtonHeight-20 ...
    round(PanelW/2)-200 50 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'N° de ecuaciones: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'callback',@numberOFLSEquation,...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.n = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)-50 12*ButtonHeight round(PanelW/2)-500 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'Callback',@lienearSysNEdit,...
    'FontName', 'arial',...
    'String',3,...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [360 12*ButtonHeight-20 ...
    round(PanelW/2)-400 50 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'X0 (Valor o Vector)',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);
linearSElements.xi = uicontrol('Style', 'edit',...
    'Position', [525 12*ButtonHeight round(PanelW/2)-474 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'String',0,...
    'FontSize', 14);


width = (round(PanelW/2)-250)/3-1;
ColumnWidths = num2cell(ones(1,3)*width);
dat= zeros(3,3);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)-200 6.5*ButtonHeight+7 round(PanelW/2)-200 50 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'A: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.a = uitable(   'Position', [round(PanelW/4)-150 5*ButtonHeight+27 ...
    round(PanelW/2)-250 150 ],...
    'Parent', TabHandles{2,1}, ...
    'ColumnName', [],...
    'ColumnWidth',ColumnWidths,...
    'ColumnEditable',true(1,3),...
    'RowName', [],...
    'FontSize', 14,...
    'Data', dat);

linearSElements.TLText=uicontrol('Style', 'text',...
    'Position', [700 300 round(PanelW/2)-200 50 ],...
    'Parent', TabHandles{2,1}, ...
    'visible','off',...
    'string', 'T: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.TL = uitable('Position', [750 265 round(PanelW/2)-250 150 ],...
    'Parent', TabHandles{2,1}, ...
    'visible','off',...
    'ColumnName', [],...
    'ColumnWidth',ColumnWidths,...
    'ColumnEditable',false(1,1),...
    'RowName', [],...
    'FontSize', 14,...
    'Data', dat);

linearSElements.UText=uicontrol('Style', 'text',...
    'Position', [700 150 round(PanelW/2)-200 50 ],...
    'Parent', TabHandles{2,1}, ...
    'visible','off',...
    'string', 'U: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.U = uitable('Position', [750 105 round(PanelW/2)-250 150 ],...
    'Parent', TabHandles{2,1}, ...
    'visible','off',...
    'ColumnName', [],...
    'ColumnWidth',ColumnWidths,...
    'ColumnEditable',false(1,1),...
    'RowName', [],...
    'FontSize', 14,...
    'Data', dat);

dat= zeros(3,1);
width=round(PanelW/4)-185;
ColumnWidths = num2cell(ones(1,1)*width);

uicontrol('Style', 'text',...
    'Position', [520 6.5*ButtonHeight+7 round(PanelW/4)-200 50 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'B: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.b = uitable(   'Position', [550 5*ButtonHeight+27 ...
    round(PanelW/2)-500 150 ],...
    'Parent', TabHandles{2,1}, ...
    'ColumnName', [],...
    'ColumnEditable',true(1,1),...
    'RowName', [],...
    'FontSize', 14,...
    'Data', dat);

uicontrol('Style', 'text',...
    'Position', [700 470 ...
    round(PanelW/2)-200 50 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'x: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.x = uitable('Position', [750 435 round(PanelW/4)-165 150 ],...
    'Parent', TabHandles{2,1}, ...
    'ColumnName', [],...
    'ColumnEditable',false(1,1),...
    'Columnwidth',ColumnWidths,...
    'RowName', [],...
    'FontSize', 14,...
    'Data', dat);

linearSElements.cText=uicontrol('Style', 'text',...
    'Position', [910 470 round(PanelW/2)-200 50 ],...
    'Parent', TabHandles{2,1}, ...
    'visible','off',...
    'string', 'C: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.c = uitable('Position', [960 435 round(PanelW/4)-165 150 ],...
    'Parent', TabHandles{2,1}, ...
    'visible','off',...
    'ColumnName', [],...
    'Columnwidth',ColumnWidths,...
    'ColumnEditable',false(1,1),...
    'RowName', [],...
    'FontSize', 14,...
    'Data', dat);



linearSElements.NText=uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)-200 10*ButtonHeight+8 150 30 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'N° Iteraciones: ',...
    'BackgroundColor',BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.NMax=uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)-50 10*ButtonHeight+8 round(PanelW/2)-500 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', White,...
    'Enable', 'on', ...
    'string','10000',...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.ErText=uicontrol('Style', 'text',...
    'Position', [360 10*ButtonHeight+8 150 40 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'Error: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.Er=uicontrol('Style', 'edit',...
    'Position', [525 10*ButtonHeight+8 round(PanelW/2)-474 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', White,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);



linearSElements.resultText = uicontrol('Style', 'edit',...
    'Position', [700 50 ...
    round(PanelW/2)-150 round(PanelH)-300 ],...
    'visible','on',...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'max',2000,...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.condText=uicontrol('Style', 'text',...
    'Position', [125 3*ButtonHeight+35 350 40 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'Con la condición de parada: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.cond=uicontrol('Style', 'edit',...
    'Position', [125 2*ButtonHeight+45 350 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.NText=uicontrol('Style', 'text',...
    'Position', [500 3*ButtonHeight+35 150 40 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'N° Iteraciones: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.N=uicontrol('Style', 'edit',...
    'Position', [500 2*ButtonHeight+45 150 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.piv = uicontrol('Style', 'popupmenu',...
    'Position', [900 12*ButtonHeight-20 200 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'String',{'Sencilla','Pivoteo Parcial',...
    'Pivoteo Total'},...
    'FontSize', 14);
linearSElements.pivText = uicontrol('Style', 'text',...
    'Position', [900 12*ButtonHeight+20 200 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'String','Tipo:',...
    'FontSize', 14);

linearSElements.RText=uicontrol('Style', 'text',...
    'Position', [800 3*ButtonHeight+35 200 40 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'Radio Espectral de T: ',...
    'visible','off',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

linearSElements.R=uicontrol('Style', 'edit',...
    'Position', [825 2*ButtonHeight+45 150 40 ],...
    'Parent', TabHandles{2,1}, ...
    'BackgroundColor', BackColor,...
    'Enable', 'off', ...
    'visible','off',...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

uicontrol('Style', 'pushbutton',...
    'Units', 'pixels', ...
    'Position', [250 50 round(PanelW/2)-400 50 ],...
    'Parent', TabHandles{2,1}, ...
    'string', 'Solve system',...
    'callback',@solveLSEquation,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 12);

%% Interpolación

Intro = {'Aquí puedes resolver sistemas de ecuaciones lineales'};

%   Display it - Put the handle in TabHandles so that it can be deleted later
TabHandles{Num_Tabs+2,1} =uicontrol('Style', 'text',...
    'Position', [round(PanelW/8) 7*ButtonHeight+50 round(3*PanelW/4) 324 ],...
    'Parent', TabHandles{3,1}, ...
    'string', Intro,...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 12*ButtonHeight+50 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{3,1}, ...
    'string', 'Método: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+15 12*ButtonHeight-20 ...
    round(PanelW/2)-200 50 ],...
    'Parent', TabHandles{3,1}, ...
    'string', 'N° de puntos: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

curve.n = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+165 12*ButtonHeight round(PanelW/2)-500 40 ],...
    'Parent', TabHandles{3,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'Callback',@curveEdit,...
    'FontName', 'arial',...
    'String',3,...
    'FontSize', 14);

curve.popup = uicontrol('Style', 'popupmenu',...
    'Position', [round(PanelW/4)+170 12*ButtonHeight+50 round(PanelW/2)-135 40 ],...
    'Parent', TabHandles{3,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'String',{'Vandermonde','Splines'},...
    'FontSize', 14);


uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+60 3*ButtonHeight+35 150 300],...
    'Parent', TabHandles{3,1}, ...
    'string', 'Puntos(x,y): ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

dat=zeros(3,2);
cW=num2cell(ones(1,3)*65);
curve.datos = uitable('Position',[round(PanelW/4)+60 2*ButtonHeight+30 150 300],...
    'Parent', TabHandles{3,1}, ...
    'visible','on',...
    'ColumnWidth',cW,...
    'ColumnName', [],...
    'ColumnEditable',true(1,2),...
    'RowName', [],...
    'FontSize', 14,...
    'Data', dat);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+350 12*ButtonHeight-20 150 50 ],...
    'Parent', TabHandles{3,1}, ...
    'string', 'Punto de interes: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

curve.x = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+535 12*ButtonHeight round(PanelW/2)-500 40 ],...
    'Parent', TabHandles{3,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+285 3*ButtonHeight+35 350 300],...
    'Parent', TabHandles{3,1}, ...
    'string', 'Polinomio interpolante: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

curve.f = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+285 2*ButtonHeight+180 350 150 ],...
    'Parent', TabHandles{3,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'enable','off',...
    'max',2000,...
    'FontSize', 14);

uicontrol('Style', 'text',...
    'Position', [round(PanelW/4)+285 5*ButtonHeight-20 150 50 ],...
    'Parent', TabHandles{3,1}, ...
    'string', 'Valor encontrado: ',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontSize', 14);

curve.y = uicontrol('Style', 'edit',...
    'Position', [round(PanelW/4)+500 5*ButtonHeight round(PanelW/2)-465 40 ],...
    'Parent', TabHandles{3,1}, ...
    'BackgroundColor', White,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'enable','off',...
    'max',2000,...
    'FontSize', 14);

curve.both=uicontrol('Style', 'checkbox',...
    'Position', [round(PanelW/4)+285 4*ButtonHeight-10 350 40 ],...
    'Parent', TabHandles{3,1}, ...
    'string', 'Comparar ambos métodos',...
    'BackgroundColor', BackColor,...
    'HorizontalAlignment', 'left',...
    'FontName', 'arial',...
    'FontSize', 14);

uicontrol('Style', 'pushbutton',...
    'Units', 'pixels', ...
    'Position', [round(PanelW/4)+285 3*ButtonHeight-10 165 40 ],...
    'Parent', TabHandles{3,1}, ...
    'string', 'Interpolar',...
    'callback',@fitcurve,...
    'HorizontalAlignment', 'center',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 12);

curve.graph=uicontrol('Style', 'pushbutton',...
    'Units', 'pixels', ...
    'Position', [round(PanelW/4)+470 3*ButtonHeight-10 165 40 ],...
    'Parent', TabHandles{3,1}, ...
    'string', 'Graficar',...
    'callback',@GraphCurve,...
    'HorizontalAlignment', 'center',...
    'enable','off',...
    'FontName', 'arial',...
    'FontWeight', 'bold',...
    'FontSize', 12);

data{1} = TabHandles;
data{2} = rootsElements;
data{3} = linearSElements;
data{4} = curve;
guidata(hTabFig,data);
%%   Make Tab 1 active
TabSellectCallback(0,0,1);


try
    Popup1Callback(linearSElements.popup);
catch
end

end

function lienearSysNEdit(hObject,~,~)

    data = guidata(gcf);
    elem = data{3};
    
    a = elem.a;
    b = elem.b;
    x = elem.x;
    T = elem.TL;
    c = elem.c;
    
    n = str2double(get(hObject,'string'));
    width = get(a,'position');
    ColumnWidths = num2cell(ones(1,n)*(round(width(3)/n-1)-2));
    dat= zeros(n,n);
    set(a,'ColumnWidth',ColumnWidths);
    set(a,'data',dat);
    set(a,'ColumnEditable',true(1,n));
    str = cell(1,n);
    str(:)={'long g'};
    set(a,'ColumnFormat',str);
    
    set(T,'ColumnWidth',ColumnWidths);
    set(T,'data',dat);
    str(:)={'long g'};
    set(T,'ColumnFormat',str);
    
    
    dat= zeros(n,1);
    set(b,'data',dat);
    set(b,'ColumnEditable',true(1,1));
    set(b,'ColumnFormat',{'long g'});
    
    set(x,'data',dat);
    set(x,'ColumnFormat',{'long g'});
    
    set(c,'data',dat);
    set(c,'ColumnFormat',{'long g'});
    
end

function curveEdit(hObject,~,~)

    data = guidata(gcf);
    elem = data{4};
    
    d = elem.datos;
    
    n = str2double(get(hObject,'string'));
    
    
    dat= zeros(n,2);
    set(d,'data',dat);
    set(d,'ColumnEditable',true(1,n));
    str = cell(1,n);
    str(:)={'long g'};
    set(d,'ColumnFormat',str);
    
end


function TabSellectCallback(~,~,SelectedTab)
%   All tab selection pushbuttons are greyed out and uipanels are set to
%   visible off, then the selected panel is made visible and it's selection
%   pushbutton is highlighted.

%   Set up some varables
data = guidata(gcf);
TabHandles = data{1};
NumberOfTabs = size(TabHandles,1)-2;
White = TabHandles{NumberOfTabs+2,2};            % White
BackColor = TabHandles{NumberOfTabs+2,3};          % Light Grey

%   Turn all tabs off
for TabCount = 1:NumberOfTabs
    set(TabHandles{TabCount,1}, 'Visible', 'off');
    set(TabHandles{TabCount,2}, 'BackgroundColor', BackColor);
end

%   Enable the selected tab
set(TabHandles{SelectedTab,1}, 'Visible', 'on');
set(TabHandles{SelectedTab,2}, 'BackgroundColor', White);
end

function PopupCallback(hObject, eventdata, handles)

data = guidata(gcf);
elem = data{2};

ButtonHeight = 40;

if get(hObject,'value') == 4 
    
    set(elem.functiongx,'visible','on');
    set(elem.gxText, 'visible','on');
    
    pos = get(elem.x0value,'position');
    pos(2)= 10*ButtonHeight-45;
    set(elem.x0value,'position',pos);
    
    pos = get(elem.xText,'position');
    pos(2)= 9*ButtonHeight-15;
    set(elem.xText,'position',pos);
    
    pos = get(elem.ErrorText,'position');
    pos(2)= 8*ButtonHeight-20;
    set(elem.ErrorText,'position',pos); 
    
    pos = get(elem.Error,'position');
    pos(2)= 8*ButtonHeight-10;
    set(elem.Error,'position',pos);
    
    pos = get(elem.IterText,'position');
    pos(2)= 7*ButtonHeight-25;
    set(elem.IterText,'position',pos);
    
    pos = get(elem.Iter,'position');
    pos(2)= 7*ButtonHeight-15;
    set(elem.Iter,'position',pos);
    
    pos = get(elem.SolButton,'position');
    pos(2)= 6*ButtonHeight-30;
    set(elem.SolButton,'position',pos);
    
    pos = get(elem.SolText,'position');
    pos(2)= 5*ButtonHeight-35;
    set(elem.SolText,'position',pos);
    
    pos = get(elem.Sol,'position');
    pos(2)= 4*ButtonHeight-25;
    set(elem.Sol,'position',pos);
    
    pos = get(elem.condText,'position');
    pos(2)= 3*ButtonHeight-35;
    set(elem.condText,'position',pos);
    
    pos = get(elem.cond,'position');
    pos(2)= 2*ButtonHeight-25;
    set(elem.cond,'position',pos);
    
    pos = get(elem.ErText,'position');
    pos(2)= 5*ButtonHeight-35;
    set(elem.ErText,'position',pos);
    
    pos = get(elem.Er,'position');
    pos(2)= 4*ButtonHeight-25;
    set(elem.Er,'position',pos);
    
    pos = get(elem.NText,'position');
    pos(2)= 3*ButtonHeight-35;
    set(elem.NText,'position',pos);
    
    pos = get(elem.N,'position');
    pos(2)= 2*ButtonHeight-25;
    set(elem.N,'position',pos);
else
    set(elem.functiongx,'visible','off');
    set(elem.gxText, 'visible','off');
    
    pos = get(elem.x0value,'position');
    pos(2)= 10*ButtonHeight+25;
    set(elem.x0value,'position',pos);
    
    pos = get(elem.xText,'position');
    pos(2)= 9*ButtonHeight+55;
    set(elem.xText,'position',pos);
    
    pos = get(elem.ErrorText,'position');
    pos(2)= 8*ButtonHeight+50;
    set(elem.ErrorText,'position',pos); 
    
    pos = get(elem.Error,'position');
    pos(2)= 8*ButtonHeight+60;
    set(elem.Error,'position',pos);
    
    pos = get(elem.IterText,'position');
    pos(2)= 7*ButtonHeight+45;
    set(elem.IterText,'position',pos);
    
    pos = get(elem.Iter,'position');
    pos(2)= 7*ButtonHeight+55;
    set(elem.Iter,'position',pos);
    
    pos = get(elem.SolButton,'position');
    pos(2)= 6*ButtonHeight+40;
    set(elem.SolButton,'position',pos);
    
    pos = get(elem.SolText,'position');
    pos(2)= 5*ButtonHeight+35;
    set(elem.SolText,'position',pos);
    
    pos = get(elem.Sol,'position');
    pos(2)= 4*ButtonHeight+45;
    set(elem.Sol,'position',pos);
    
    pos = get(elem.ErText,'position');
    pos(2)= 5*ButtonHeight+35;
    set(elem.ErText,'position',pos);
    
    pos = get(elem.Er,'position');
    pos(2)= 4*ButtonHeight+45;
    set(elem.Er,'position',pos);
    
    pos = get(elem.condText,'position');
    pos(2)= 3*ButtonHeight+35;
    set(elem.condText,'position',pos);
    
    pos = get(elem.cond,'position');
    pos(2)= 2*ButtonHeight+45;
    set(elem.cond,'position',pos);
    
    pos = get(elem.NText,'position');
    pos(2)= 3*ButtonHeight+35;
    set(elem.NText,'position',pos);
    
    pos = get(elem.N,'position');
    pos(2)= 2*ButtonHeight+45;
    set(elem.N,'position',pos);
end
if get(hObject,'value') == 2 || get(hObject,'value') == 3 || get(hObject,'value') == 6
    
    set(elem.x1value,'visible','on');
    set(elem.xText,'string','x0 x1:')
else
    set(elem.x1value,'visible','off');
    set(elem.xText,'string','x0:')

end
if get(hObject,'value') == 1
    set(elem.ErrorText,'String','Tamaño de Paso: ')
    
else
    set(elem.ErrorText,'String','Error Esperado: ')

end
end

function Popup2Callback(hObject, eventdata, handles)

data = guidata(gcf);
elem = data{3};

switch get(hObject,'value')
    case 1
        set(elem.resultText,'visible','on');
        set(elem.piv,'visible','on');
        set(elem.pivText,'visible','on');
        set(elem.c,'visible','off');
        set(elem.cText,'visible','off');
        set(elem.TL,'visible','off');
        set(elem.TLText,'visible','off');
        set(elem.U,'visible','off');
        set(elem.UText,'visible','off');
        set(elem.RText,'visible','off');
        set(elem.R,'visible','off');
        set(elem.Er, 'enable','off');
    case 2
        set(elem.resultText,'visible','off');
        set(elem.piv,'visible','off');
        set(elem.pivText,'visible','off');
        set(elem.c,'visible','off');
        set(elem.cText,'visible','off');
        set(elem.TL,'visible','on');
        set(elem.TLText,'visible','on');
        set(elem.TLText,'string','L');
        set(elem.U,'visible','on');
        set(elem.UText,'visible','on');
        set(elem.RText,'visible','off');
        set(elem.R,'visible','off');
        set(elem.Er, 'enable','off');
    case 3
        set(elem.resultText,'visible','off');
        set(elem.piv,'visible','off');
        set(elem.pivText,'visible','off');
        set(elem.c,'visible','on');
        set(elem.cText,'visible','on');
        set(elem.TL,'visible','on');
        set(elem.TLText,'visible','on');
        set(elem.TLText,'string','T');
        set(elem.U,'visible','off');
        set(elem.UText,'visible','off');
        set(elem.RText,'visible','on');
        set(elem.R,'visible','on');
        set(elem.Er, 'enable','on');
    case 4
        set(elem.resultText,'visible','off');
        set(elem.piv,'visible','off');
        set(elem.pivText,'visible','off');
        set(elem.c,'visible','on');
        set(elem.cText,'visible','on');
        set(elem.TL,'visible','on');
        set(elem.TLText,'visible','on');
        set(elem.TLText,'string','T');
        set(elem.U,'visible','off');
        set(elem.UText,'visible','off');
        set(elem.RText,'visible','on');
        set(elem.R,'visible','on');
        set(elem.Er, 'enable','on');
end
end

function RootCallback(~, ~)
format long
data = guidata(gcf);
elem = data{2};

x0=str2double(get(elem.x0value,'String'));
Nmax=str2double(get(elem.Iter,'String'));
Error=str2double(get(elem.Error,'String'));
switch get(elem.popup,'value')
    case 1
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        [X, cond, c]=bIncrementales(fun,x0,Error,Nmax);
        if (cond=="Iteraciones Máximas")
            set(elem.SolText,'String','Raiz no encontrada, intervalo final:')
            set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
            set(elem.Er, 'String', 'No Aplica');
        else
            if length(X)==1
                set(elem.SolText,'String','Raiz encontrada en el punto:')
                set(elem.Sol,'String',sprintf('%.16f',X));
                set(elem.Er, 'String','0');
            else
                set(elem.SolText,'String','Raiz encontrada en el intervalo:')
                set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
                set(elem.Er, 'String',num2str(Error));
            end
        end
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
    case 2
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        x1=str2double(get(elem.x1value,'String'));
        [X, cond, c, error] = biseccion(fun, x0, x1, Error, Nmax);
        if (cond=="Iteraciones Máximas")
            set(elem.SolText,'String','Raiz no encontrada, intervalo final:');
            set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
            set(elem.Er, 'String', error);
        elseif (cond=="No hay raiz en el intervalo")
            set(elem.SolText,'String','Raiz no encontrada')
            set(elem.Sol,'String','No Aplica');
            set(elem.Er, 'String', error);
        else
            if length(X)==1
                set(elem.SolText,'String','Raiz encontrada en el punto:')
                set(elem.Sol,'String',sprintf('%.16f',X));
                set(elem.Er, 'String','0');
            else
                set(elem.SolText,'String','Raiz encontrada en el intervalo:');
                set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
                set(elem.Er, 'String',num2str(error));
            end
        end
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
    case 3
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        x1=str2double(get(elem.x1value,'String'));
        [X, cond, c, error] = reglaFalsa(fun, x0, x1, Error, Nmax);
        if (cond=="Iteraciones Máximas")
            set(elem.SolText,'String','Raiz no encontrada, intervalo final:')
            set(elem.Sol,'String',sprintf(['[',sprintf('%.12f',X(1)),',',sprintf('%.12f',X(2)),']']));
            set(elem.Er, 'String', error);
        elseif (cond=="No hay raiz en el intervalo")
            set(elem.SolText,'String','Raiz no encontrada')
            set(elem.Sol,'String',X);
            set(elem.Er, 'String', error);
        elseif(cond=="Raiz encontrada")
            set(elem.SolText,'String','Raiz encontrada en el punto:')
            set(elem.Sol,'String',sprintf('%.16f',X));
            set(elem.Er, 'String','0');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
            set(elem.Er, 'String',num2str(error));
            set(elem.Sol,'String',sprintf('%.16f',X));
        end
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
    case 4
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        g=str2func(['@(x)',(get(elem.functiongx,'String'))]);
        [X, cond, c, error] = puntoFijo(fun, g, x0, Error, Nmax);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
        set(elem.Sol,'String',sprintf('%.16f',X));
        set(elem.Er, 'String', error);
        if (cond=="Iteraciones Máximas")
             set(elem.SolText,'String','Raiz no encontrada, punto final:');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
        end
    case 5
        fun=get(elem.functionfx,'String');
        [X, cond, c, error]=newton(fun,x0,Error,Nmax);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
        set(elem.Sol,'String',sprintf('%.16f',X));
        set(elem.Er, 'String', num2str(error));
        if (cond=="Iteraciones Máximas")
             set(elem.SolText,'String','Raiz no encontrada, punto final:');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
        end
    case 6
        fun=str2func(['@(x)',(get(elem.functionfx,'String'))]);
        x1=str2double(get(elem.x1value,'String'));
        [X, cond, c, error]=secante(fun,x0,x1,Error,Nmax);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
        set(elem.Sol,'String',sprintf('%.16f',X));
        set(elem.Er, 'String', num2str(error));
        if (cond=="Iteraciones Máximas")
             set(elem.SolText,'String','Raiz no encontrada, punto final:');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
        end
    case 7
        fun=get(elem.functionfx,'String');
        [X, cond, c, error]=raices(fun,x0,Error,Nmax);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', c);
        set(elem.Sol,'String',sprintf('%.16f',X));
        set(elem.Er, 'String', num2str(error));
        if (cond=="Iteraciones Máximas")
             set(elem.SolText,'String','Raiz no encontrada, punto final:');
        else
            set(elem.SolText,'String','Raiz encontrada en el punto:')
        end
end
end
function fitcurve(hObject,~,~)%#ok<*INUSD>
    data = guidata(gcf);
    elem = data{4};
    set(elem.graph,'enable','on');
    D=get(elem.datos,'data');
    x=str2num(get(elem.x,'string'));
    switch get(elem.popup,'value')
        case 1
            [f, cond, y] = vandermonde(D, x);
        case 2
            [f, cond, y] = splines(D, x);
    end
    f=string(f);
    s=[cond;f];
    y=double(y);
    set(elem.f,'string',s);
    set(elem.y,'string',sprintf('%.8f',y));
end

function keep_guis
fig_h = permute( findobj( 0, 'Type', 'Figure' ), [2,1] );
for fh = fig_h
    uih = findobj( fh, 'Type', 'uicontrol' );
    if isempty( uih )
        delete( fh );
    end
end
end

function GraphCurve(hObject,~,~)%#ok<*INUSD>
    data = guidata(gcf);
    elem = data{4};    
    keep_guis
    figure;
    D=get(elem.datos,'data');
    x= str2num(get(elem.x,'string'));
    y= str2num(get(elem.y,'string'));
    f= get(elem.f,'string');
    f= str2sym(f(2:length(f),:));
    t= get(elem.popup,'value');
    b= get(elem.both,'value');
    plot(D(:,1),D(:,2),'ob');
    hold on;
    plot(x,y,'db');
    if b==0
        if t==1
            fplot(f(1),[D(1,1),D(length(D),1)],'-b')
        else
            for i = 1:length(f)
                hold on
                fplot(f(i),[D(i,1),D(i+1,1)],'-b')
            end
        end
        legend('data','Interpolado','polinomio')
    else
        if t==1
            [f1,~,y1]=splines(D, x);
            y1=double(y1);
            plot(x,y1,'dr');
            fplot(f(1),[D(1,1),D(length(D),1)],'-b')
            for i = 1:length(f1)
                hold on
                fplot(f1(i),[D(i,1),D(i+1,1)],'-r')
            end
            legend('data','Interpolado Valdermonde','Interpolado Splines','polinomio Vandermonde','polinomio splines')
        else
            [f1,~,y1]=vandermonde(D, x);
            y1=double(y1);
            plot(x,y1,'dr');
            fplot(f1(1),[D(1,1),D(length(D),1)],'-r')
            for i = 1:length(f)
                hold on
                fplot(f(i),[D(i,1),D(i+1,1)],'-b')
            end
            legend('data','Interpolado Splines','Interpolado Vandermonde','polinomio Vandermonde','polinomio splines')
        end
    end
    
    legend('location','best')
end
function solveLSEquation(hObject,~,~) %#ok<*INUSD>
data = guidata(gcf);
elem = data{3};

A = get(elem.a,'data');
b = get(elem.b,'data');
n_max=str2num(get(elem.NMax,'string'));
x_0 = str2num(get(elem.xi,'string'));
Er = str2num(get(elem.Er,'string'));
if length(x_0) == 1
    x_0 = ones(length(A),1)*x_0;
end

switch get(elem.popup,'value')
    case 1
        switch get(elem.piv,'value')
            case 1
                [X, cond, count, proc] = Gauss_S(A,b,x_0,n_max);
            case 2
                [X, cond, count, proc] = Gauss_P(A,b,x_0,n_max);
            case 3
                [X, cond, count, proc] = Gauss_T(A,b,x_0,n_max);
        end 
        set(elem.x,'data',X);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', count);
        if length(X) == 1
            return;
        end
        message = '';
        for i=1:length(proc)
        %     word=matrixword(proc{i,2});
        %     rr = sprintf('%s',word);
            rr='';
            [a,b] = size(proc{i,2});
    
            for j=1:a
                for k=1:b
                    if k==1
                        rr = sprintf('%s%g',rr,proc{i,2}(j,k));
                    else
                        rr = sprintf('%s\t%g',rr,proc{i,2}(j,k));
                    end
                end
                rr = sprintf('%s \n',rr);
            end
            message=sprintf('%s %g) %s\n%s\n',message,i,proc{i,1},rr);
        end

set(elem.resultText,'string',message);
    case 2 
        [X, cond, count, L, U] = LU_S(A,b,x_0,n_max);
        set(elem.x,'data',X);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', count);
        set(elem.U, 'data', U);
        set(elem.TL, 'data', L);
    case 3
        [X, cond, count, Tj, Cj, r ] = gauss_seidel(A,b,x_0,n_max,Er);
        set(elem.x,'data',X);
        set(elem.TL,'data',Tj);
        set(elem.c,'data',Cj);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', count);
        if r ~= 0
            set(elem.R, 'String' , r);
        else
            set(elem.R, 'String' , 'No aplica');
        end
    case 4
        [X, cond, count, Tj ,Cj, r] = jacobi(A,b,x_0,n_max,Er);
        set(elem.x,'data',X);
        set(elem.TL,'data',Tj);
        set(elem.c,'data',Cj);
        set(elem.cond, 'String',cond);
        set(elem.N, 'String', count);
        if r ~= 0
            set(elem.R, 'String' , r);
        else
            set(elem.R, 'String' , 'No aplica');
        end
end

end

